@{
    ViewBag.Title = "个人中心";
}
@Scripts.Render("~/bundles/component")
@Html.AntiForgeryToken()
<div id="vue2" v-cloak>
    <div class="ui secondary pointing menu">
        <a class="item active" v-on:click="isShow=1">个人信息 </a>
        @if (ViewBag.RoleId == 1)
        {
            <a class="item" v-on:click="isShow=2">员工管理 </a>
            <a class="item" v-on:click="isShow=3">考勤备注审批 </a>
        }
    </div>

    <div v-if="isShow==1">
        <div class="left22">
            <h2 class="ui center aligned icon header"><i class="circular user icon" style="cursor:pointer;" id="usertitle" title="点此修改基本信息" v-on:click="showEditUserBox(0,nowUser)"></i>用户信息 </h2>
            <div class="ui text container center aligned">
                <div class="column"><label>用户名：{{nowUser.UserName}}</label></div>
                <div class="column"><label>扮演角色：{{nowUser.RoleId|RoleTransName}}</label></div>
                <div class="column"><label>登录邮箱：{{nowUser.Email}}</label></div>
                <div class="column"><label>创建日期：{{nowUser.CreateTime}}</label></div>
            </div>
        </div>

    </div>
    @if (ViewBag.RoleId == 1)
    {
        <div v-if="isShow==2">
            <div class="height15"></div>
            <div class="left22">
                <table class="ui selectable celled table">
                    <thead>
                        <tr>
                            <th colspan="6">
                                <div class="ui left floated small red labeled icon button" v-on:click="deleteUserList"><i class="remove user icon"></i> 删除用户 </div>
                                <div class="ui icon input small left">
                                    <input type="text" v-model="req.userName" placeholder="请输入查询的用户名" maxlength="6">
                                    <i class="search icon"></i>
                                </div>
                                <div class="ui right floated small green labeled icon button" v-on:click="showEditUserBox(1)"><i class="add user icon"></i> 添加用户 </div>
                            </th>
                        </tr>
                        <tr>
                            <th><input type="checkbox" class="select-parent" v-on:click="checkSelectAll($event)" /></th>
                            <th class="two wide">姓名</th>
                            <th class="five wide">邮箱地址(登录名)</th>
                            <th class="four wide">创建时间</th>
                            <th class="three wide">角色</th>
                            <th class="two wide">操作</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr v-for="(item,index) in req.selectUserList">
                            <td class="collapsing"><input class="select-item" type="checkbox" v-on:click="checkSelect(item,$event)" /></td>
                            <td>{{item.UserName}}</td>
                            <td>{{item.Email}}</td>
                            <td>{{item.CreateTime}}</td>
                            <td>{{item.RoleId|RoleTransName}}</td>
                            <td>
                                <button class="ui icon button mini basic blue" v-on:click="showEditUserBox(0,item)">
                                    <i class="edit icon"></i>
                                </button>
                                <button class="ui icon button mini basic red" v-on:click="deleteOneUser(item)">
                                    <i class="trash outline icon"></i>
                                </button>
                            </td>
                        </tr>
                    </tbody>
                    <tfoot>
                        <tr>
                            <th colspan="6">
                                <pagination class="right" v-bind:pages="req.pageNum" v-bind:current.sync="req.pageIndex" v-on:navpage="paging"></pagination>
                            </th>
                        </tr>
                    </tfoot>
                </table>
            </div>
        </div>
        <div v-if="isShow==3">
            <div class="height15"></div>
            <div class="left22">
                <table class="ui celled table">
                    <thead>
                        <tr>
                            <th><input type="checkbox" class="select-parent"/></th>
                            <th class="two wide">姓名</th>
                            <th class="two wide">日期</th>
                            <th class="two wide">具体时间范围</th>
                            <th class="two wide">备注类别</th>
                            <th class="six wide">备注内容</th>
                            <th class="two wide">操作</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td class="collapsing"><input type="checkbox"  class="select-item" /></td>
                            <td>Cell</td>
                            <td>Cell</td>
                            <td>Cell</td>
                            <td>Cell</td>
                            <td>Cell</td>
                            <td>Cell</td>
                        </tr>
                    </tbody>
                    <tfoot>
                        <tr>
                            <th colspan="7">
                                <pagination class="right" v-bind:pages="req.pageNum" v-bind:current.sync="req.pageIndex" v-on:navpage="paging"></pagination>
                            </th>
                        </tr>
                    </tfoot>
                </table>
            </div>
        </div>
    }
    <div class="ui small modal" id="editUser">
        <div class="header" id="editUser-header">
        </div>
        <div class="content ui form" v-if="editUser">
            <div id="add-user" class="field">
                <textarea rows="2" maxlength="1000" placeholder="这里填写新增的用户姓名，单个用户请直接输入用户姓名，多个用户请使用英文逗号分隔(例如：张三,李四,王五)，最多可输入1000个字符" id="markReason" v-model="editUser.addUsers"></textarea>
            </div>
            <div id="edit-user">
                <div class="field"> <strong>用户姓名：{{editUser.editUser.UserName}}</strong></div>
                <div class="field">
                    <div class="ui input focus">
                        <input type="email" maxlength="50" placeholder="输入新的登录邮箱地址,不填写默认不更新" v-model="editUser.editUser.Email">
                    </div>
                </div>
                <div class="field">
                    <div class="ui input focus">
                        <input type="password" maxlength="20" placeholder="输入新的密码,不填写默认不更新" v-model="editUser.editUser.Pwd">
                    </div>
                </div>
                <div class="field">
                    <div class="inline fields">
                        <label>权限角色(不填为默认)： </label>
                        <template v-for="i in 3">
                            <div class="field">
                                <div class="ui radio checkbox">
                                    <input type="radio" name="frequency" checked="checked" :value="i" v-model="editUser.editUser.RoleId">
                                    <label>{{i|RoleTransName}}</label>
                                </div>
                            </div>
                        </template>
                    </div>
                </div>
            </div>

        </div>
        <div class="actions">
            <div class="ui cancel button" id="btnCancle">取消 </div>
            <div class="ui positive right labeled icon button">确定 <i class="checkmark icon"></i> </div>
        </div>
    </div>
</div>
@Html.AntiForgeryToken()
<script type="text/javascript">
    var __RequestVerificationToken = $('input[name="__RequestVerificationToken"]').val();
    var vm = new Vue({
        el: '#vue2',
        data: {
            isShow:1,
            roleId :@ViewBag.RoleId,
            req: {
                pageIndex: 1,
                pageNum: 1,
                pageSize: 10,
                visiblePage: 3,
                pageList: {},
                userName: '',
                selectUserList: [],
                totalCount: 0,
                leftNum: 0,
                rightNum: 5
            },
            userList: [],
            selectedList: [],
            editUser: {
                editUser: {},
                addUsers: '',
                isAdd: 1
            },
            nowUser: {
                UserId:@ViewBag.UserId,
                UserName:'@ViewBag.UserName',
                Email:'@ViewBag.Email',
                RoleId:@ViewBag.RoleId,
                CreateTime:'@ViewBag.CreateTime',
                Pwd:''
            }
        },
        mounted: function () {
            init(this);
            this.getUserList();
        },
        methods: {
            getUserList: function () {
                $('.pagination>.item').removeClass('active');
                this.req.pageIndex = 1;
                var _self = this;
                var req = $.ajax({
                    type: 'POST',
                    url: bhConfig.GetUserList,
                    data: { __RequestVerificationToken: __RequestVerificationToken },
                    dataType: "JSON",
                    cache: false
                });
                req.done(function (res) {
                    if (res == null || res == "")
                        return helper.toolTipBox("操作失败");
                    if (res.MsgStatus) {
                        _self.userList = $.extend([],res.MsgContent);
                        _self.req.totalCount = res.MsgContent.length;
                        _self.paging();
                    }
                    else
                        return helper.toolTipBox(res.MsgContent);
                });
                req.always(function () {
                });
            },
            checkSelect: function (item, event) {
                var index = this.selectedList.indexOf(item);
                if ($(event.target).is(":checked")) {
                    if (index < 0)
                        this.selectedList.push(item);
                } else {
                    $('.select-parent').prop('checked', false);
                    this.selectedList.splice(index, 1);
                }
                if (this.selectedList.length == this.req.cutLength) {
                    $('.select-parent').prop('checked', true);
                    this.selectedList = $.extend([], this.req.selectUserList);
                }

                console.log(this.selectedList);
            },
            checkSelectAll: function (event) {
                if ($(event.target).is(":checked"))
                    this.selectedList = $.extend([], this.req.selectUserList);
                else
                    this.selectedList = [];
                $('.select-item').prop('checked', $(event.target).is(":checked"));
                console.log(this.selectedList);
            },
            paging: function (pageIndex) {
                if (pageIndex == undefined) {
                    this.req.pageIndex = 1;
                } else {
                    this.req.pageIndex = pageIndex;
                }
                if (this.req.pageIndex <= 0)
                    this.req.pageIndex = 1;
                var maxPage = parseInt(this.req.totalCount / this.req.pageSize);
                var mod = this.req.totalCount % this.req.pageSize;
                mod > 0 ? ++maxPage : maxPage;
                this.req.pageNum = maxPage;

                if (this.req.pageIndex > maxPage)
                    this.req.pageIndex = maxPage;

                var leftLength = (this.req.pageIndex - 1) * this.req.pageSize;
                var rightLength = this.req.pageIndex * this.req.pageSize;
                if (this.req.pageIndex == maxPage) {
                    rightLength = this.req.totalCount;
                }
                this.req.cutLength = rightLength - leftLength;
                this.req.selectUserList = this.userList.slice(leftLength, rightLength);
                $('.select-item').prop('checked', false);
                $('.select-parent').prop('checked', false);
            },
            selectOneUser: function (userName) {
                if (userName == undefined || userName == '') {
                    return this.paging(1);
                }
                var thisUser = this.userList.filter(function (item) {
                    return item.UserName == userName;
                });
                if (thisUser) {
                    this.selectedList = [];
                    this.req.selectUserList = thisUser;
                    this.req.cutLength = 1;
                    $('.select-item').prop('checked', false);
                    $('.select-parent').prop('checked', false);
                }
            },
            deleteListLast: function () {
                var _self = this;
                var userIds = new Array();

                this.selectedList.forEach(function (item) {
                    userIds.push(item.UserId);
                });
                var req = $.ajax({
                    type: 'POST',
                    url: bhConfig.DeleteUserList,
                    data: {
                        __RequestVerificationToken: __RequestVerificationToken,
                        UserIds: userIds.toString()
                    },
                    dataType: "JSON",
                    cache: false
                });
                req.done(function (res) {
                    if (res == null || res == "")
                        return helper.toolTipBox("操作失败");
                    if (res.MsgStatus) {
                        _self.getUserList();
                        _self.selectedList = [];
                    }
                    return helper.toolTipBox(res.MsgContent);
                });
            },
            showEditUserBox: function (isAdd, item) {
                $('#editUser').modal('show');
                this.editUser.boxTitle = isAdd ? "新增用户" : "修改用户";
                this.editUser.isAdd = isAdd;
                if (isAdd) {
                    $('#add-user').css('display', 'block');
                    $('#edit-user').css('display', 'none');
                    this.editUser.editUser = {};
                } else {
                    $('#add-user').css('display', 'none');
                    $('#edit-user').css('display', 'block');
                    this.editUser.editUser = $.extend({}, item);
                    this.editUser.editUser.RoleId = -1;
                    this.editUser.editUser.Email = '';
                    this.editUser.editUser.Pwd = '';
                }
                $('#editUser-header').text(this.editUser.boxTitle);
            },
            deleteUserList: function () {
                var _self = this;
                if (this.selectedList.length == 0) {
                    return helper.toolTipBox('请先选择要删除的项');
                }
                dialog({
                    title: '删除提示',
                    content: '你确定要删除选中的用户?',
                    ok: function () {
                        _self.deleteListLast();
                    },
                    cancel: function () { }
                }).show();
            },
            deleteOneUser(item) {
                var _self = this;
                if (item)
                    dialog({
                        title: '删除提示',
                        content: '你确定要删除用户[' + item.UserName + ']?',
                        ok: function () {
                            _self.selectedList = [item];
                            _self.deleteListLast();
                        },
                        cancel: function () { }
                    }).show();
            },
            editUserOperate: function () {
                //这里需要进行数据操作，新增或者修改
                if (this.editUser.isAdd) {
                    this.addUserList();
                } else {
                    this.editOneUser();
                }
            },
            addUserList: function () {
                var _self = this;
                var req = $.ajax({
                    type: 'POST',
                    url: bhConfig.AddUserList,
                    data: {
                        __RequestVerificationToken: __RequestVerificationToken,
                        UserNames: this.editUser.addUsers
                    },
                    dataType: "JSON",
                    cache: false
                });
                req.done(function (res) {
                    if (res == null || res == "")
                        return helper.toolTipBox("操作失败");
                    if (res.MsgStatus) {
                        _self.getUserList();
                        _self.editUser.addUsers = "";
                    }
                    return helper.toolTipBox(res.MsgContent);
                });
            },
            editOneUser: function () {
                var _self = this;
                var reqJson = $.extend({}, this.editUser.editUser);
                if (reqJson == undefined || reqJson == null || reqJson == '')
                    return helper.toolTipBox('数据错误，请重新填写');
                if (reqJson.UserId == undefined || reqJson.UserId == null || reqJson.UserId == '' || reqJson.UserId <= 0)
                    return helper.toolTipBox('数据错误，请重新填写');
                if (reqJson.RoleId == -1)
                    reqJson.RoleId = '';
                reqJson.__RequestVerificationToken= __RequestVerificationToken;
                var req = $.ajax({
                    type: 'POST',
                    url: bhConfig.EditUser,
                    data: reqJson,
                    dataType: "JSON",
                    cache: false
                });
                req.done(function (res) {
                    if (res == null || res == "")
                        return helper.toolTipBox("操作失败");
                    if (res.MsgStatus) {
                        _self.getUserList();
                    }
                    return helper.toolTipBox(res.MsgContent);
                });
            }
        },
        filters: {
            RoleTransName: function (value) {
                if (value) {
                    if (value == 1)
                        return "管理员";
                    else if (value == 2)
                        return "普通员工";
                    else if (value == 3)
                        return "观察者";
                    else
                        return '--';
                }
                return '--'
            }
        },
        watch: {
            'req.userName': function (newVal, oldVal) {
                if (newVal && newVal != oldVal && newVal.length >= 2) {
                    var thisUser = this.userList.filter(function (item) {
                        return item.UserName == newVal;
                    });
                    if (thisUser != [] && thisUser.length > 0)
                        return this.selectOneUser(newVal);
                }
                if (oldVal && newVal.length < oldVal.length) {
                    this.paging(1);
                }
            }
        }
    });
    function init(_self) {
        $('#editUser')
            .modal({
                blurring: true,
                onDeny: function () {
                    //这里调用取消
                },
                onApprove: function () {
                    _self.editUserOperate();
                }
            })
            .modal('hide');
        $('#usertitle')
            .popup({
                inline: false
            });
    }
</script>
